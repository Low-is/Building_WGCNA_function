calculate_avg_expression_nested <- function(exprs_mtx) {
  library(WGCNA)
  library(flashClust)
  library(curl)
  allowWGCNAThreads()
  library(AnnotationDbi)
  library(org.Hs.eg.db)
  library(clusterProfiler)
  library(msigdbr)
  
  exprs_mtx_t <- t(exprs_mtx)
  
  # Choose a set of soft-thresholding powers
  powers <- c(1:10, seq(from = 12, to = 20, by = 2))
  
  sft <- pickSoftThreshold(exprs_mtx_t, powerVector = powers, verbose = 5)
  
  r2 <- sft$fitIndices[, 2]
  validPowers <- powers[r2 > 0.8 & r2 < 0.9]
  validR2 <- r2[r2 > 0.8 & r2 < 0.9]
  
  # Choose the power with the highest R^2 within the range
  if (length(validPowers) > 0) {
    bestIndex <- which.max(validR2)
    selectedPower <- validPowers[bestIndex]
  } else {
    selectedPower <- powers[which.max(r2)]
  }
  picked_power <- selectedPower
  
  cor <- WGCNA::cor
  
  netwk <- blockwiseModules(
    exprs_mtx_t,
    power = picked_power,
    networkType = "signed",
    deepSplit = 2,
    pamRespectsDendro = TRUE,
    minModuleSize = 30,
    maxBlockSize = 4000,
    reassignThreshold = 0,
    mergeCutHeight = 0.25,
    saveTOMS = TRUE,
    saveTOMFileBase = "ER",
    numericLabels = TRUE,
    verbose = 3
  )
  
  module_df <- data.frame(
    geneID = names(netwk$colors),
    colors = labels2colors(netwk$colors)
  )
  
  cluster_df <- data.frame(
    colors = unique(module_df$colors),
    cluster = seq(1, length(unique(module_df$colors)))
  )
  
  module_df_2 <- merge(module_df, cluster_df, by = "colors")
  module_df_2$entrez <- mapIds(
    org.Hs.eg.db,
    module_df_2$geneID,
    column = "ENTREZID",
    keytype = "SYMBOL",
    multiVals = "first"
  )
  
  enrichment_res <- list()
  msigdb_data <- msigdbr(species = "Homo sapiens", category = "C5")
  msigdb_pathways <- msigdb_data %>% dplyr::select(gs_name, entrez_gene)
  
  for (cl in unique(module_df_2$cluster)) {
    cluster_genes <- module_df_2$entrez[module_df_2$cluster == cl]
    if (length(cluster_genes) > 0) {
      enricher_res <- enricher(
        gene = cluster_genes,
        TERM2GENE = msigdb_pathways
      )
      enrichment_res[[paste0("Cluster_", cl)]] <- enricher_res
    } else {
      message(paste("No valid genes for cluster:", cl))
    }
  }
  
  top_20_pathways <- lapply(enrichment_res, function(cluster) {
    cluster_df <- data.frame(cluster@result)
    top_20 <- cluster_df[1:20, ]
    return(top_20)
  })
  
  top_20_pathways_GOBP <- lapply(top_20_pathways, function(pathway) {
    filtered_pathways <- pathway %>% dplyr::filter(grepl("GOBP", Description))
    return(filtered_pathways)
  })
  
  top_20_pathways_IDs <- sapply(top_20_pathways_GOBP, function(pathway) {
    geneID <- as.character(pathway$geneID)
    strsplit(geneID, split = "/")
  })
  
  top_20_pathways_converted <- list()
  for (cluster_name in names(top_20_pathways_IDs)) {
    cluster_entrez_ids <- top_20_pathways_IDs[[cluster_name]]
    converted <- lapply(cluster_entrez_ids, function(entrez_list) {
      entrez_list <- as.character(entrez_list)
      mapIds(
        org.Hs.eg.db,
        keys = entrez_list,
        column = "SYMBOL",
        keytype = "ENTREZID"
      )
    })
    top_20_pathways_converted[[cluster_name]] <- converted
  }
  
  cluster_avg_expr <- list()

for (cluster_id in names(top_20_pathways_converted)) {
  gene_sets <- top_20_pathways_converted[[cluster_id]]
  pathway_avg <- list()
  
  for (gene_set_name in names(gene_sets)) {
    gene_set <- gene_sets[[gene_set_name]]
    genes_in_intersection <- intersect(gene_set, rownames(exprs_mtx))
    
    if (length(genes_in_intersection) > 0) {
      exprs_mtx_fil <- exprs_mtx[genes_in_intersection, , drop = FALSE]
      avg_exprs_pathway <- rowMeans(exprs_mtx_fil)
      overall_avg_expr <- mean(avg_exprs_pathway, na.rm = TRUE)
      pathway_avg[[gene_set_name]] <- overall_avg_expr
    } else {
      message("No matching genes found for gene set: ", gene_set_name)
    }
  }
  
  if (length(pathway_avg) > 0) {
    cluster_avg_expr[[cluster_id]] <- pathway_avg
  } else {
    message("No gene sets processed for cluster: ", cluster_id)
  }
}

return(list(
  cluster_avg_expr = cluster_avg_expr,
  enrichment_res = enrichment_res
))
}
